//Функция производит сериализацию в XML структуру переданного объекта, ссылки или переменной произвольного сериализуемого типа
Функция СериализоватьXML(ОбъектСериализации) экспорт
	
	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации); 
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДеревоВОбъектеXDTO); 
	Возврат ЗаписьXML.Закрыть(); 
	
КонецФункции

//создаёт объект, переменную, структуру или коллекцию на основе переданной XML структуры
Функция ДесериализоватьXML(СериализованныйОбъект) экспорт
	
	ЧтениеXMLДанных = Новый ЧтениеXML; 
	ЧтениеXMLДанных.УстановитьСтроку(СериализованныйОбъект); 
	ДесериализованныйОбъект = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных); 
	ЧтениеXMLДанных.Закрыть(); 
	Возврат ДесериализованныйОбъект; 
	
КонецФункции

//Создаёт соединение с целевой ИБ, возвращает ссылку на объект WSпрокси
//Параметры: 
//		ОписаниеОшибки - Переменная в которую будет помещено описание ошибки соединения 
//						 при неуспешной попытке. Если соединение успешно то поместит 
//						 пустую строку
//
&НаСервере
Функция ВСПрокси(ОписаниеОшибки) Экспорт
		
	ОписаниеОшибки = "";			
	Попытка 
		ВСОпределение = Новый WSОпределения(АдресПодключения, Логин, Пароль,,,,ЛОЖЬ);
		ВСПрокси = Новый WSПрокси(ВСОпределение, "osc_SimpleConnector", "osc_SimpleConnector", "osc_SimpleConnectorSoap");
		ВСПрокси.Пользователь = Логин;
		ВСПрокси.Пароль = Пароль;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;

	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат ВСПрокси;
	Иначе
		Возврат NULL;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПримерНаСервере()
	
	АдресПодключения = "http://127.0.0.1/retail3-dev/ws/osc_SimpleConnector.1cws?wsdl";
	Логин = "simple-connector";
	Пароль = "123456";
	ТекстЗапроса = "//Все, не помеченные на удаление котрагенты, начинающиеся на А
					|ВЫБРАТЬ
					|	Контрагенты.Код КАК Код,
					|	Контрагенты.Наименование КАК Наименование,
					|	Контрагенты.ИНН КАК ИНН,
					|	Контрагенты.КПП КАК КПП
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	Контрагенты.ПометкаУдаления = ЛОЖЬ
					|	И Контрагенты.Наименование ПОДОБНО &Наименование";
	ТаблицаПараметров.Очистить();
	Параметр = ТаблицаПараметров.Добавить();
	Параметр.ИмяПараметра = "Наименование";
	Параметр.ЗначениеПараметра = "А%";
	Параметр = ТаблицаПараметров.Добавить();
	Параметр.ИмяПараметра = "ПометкаУдаления";
	Параметр.ЗначениеПараметра = Ложь;
	ТипСериализацииПараметров = Перечисления.ТипыСериализации.XML;	
	Результаты = Новый ТабличныйДокумент;
	
КонецПроцедуры	

&НаСервере
Процедура ВыполнитьЗапросНаСервере()
	
	ОписаниеОшибки = "";
	ВСПрокси = ВСПрокси(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	РезультатXML = "";
	
	Если ТипСериализацииПараметров = Перечисления.ТипыСериализации.XML Тогда
		
		СтруктураПараметров = Новый Структура;
		
		Для каждого СтрокаТаб Из ТаблицаПараметров Цикл
		
			СтруктураПараметров.Вставить(СтрокаТаб.ИмяПараметра, СтрокаТаб.ЗначениеПараметра);
		
		КонецЦикла;   
		ТекстОшибки = "";
		ВходныеПараметры = СериализоватьXML(СтруктураПараметров); 
		КодРезультата = ВСПрокси.executeQuery(ТекстЗапроса, ВходныеПараметры, 1, РезультатXML, "", ТекстОшибки);
		
	Иначе
		
		ИмяПараметра = ТаблицаПараметров[0].ИмяПараметра;
		ВходнойПараметр = ТаблицаПараметров[0].ЗначениеПараметра; 
		КодРезультата = ВСПрокси.executeQuery(ТекстЗапроса, ВходнойПараметр, 0, РезультатXML, ИмяПараметра, ТекстОшибки);
		
	КонецЕсли;
	
	
	Если КодРезультата = 2 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Результат запроса пустой!";
		Сообщение.Сообщить();
	ИначеЕсли КодРезультата = 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();        
	Иначе
		Результаты.Очистить();
		Результат = ДесериализоватьXML(РезультатXML);
		Макет = ПолучитьОбщийМакет("Результаты");
		Область = Макет.ПолучитьОбласть("R1C1");
		МассивКолонок = Новый Массив;
		
		Для Каждого Колонка Из Результат.Колонки Цикл
			Область.Параметры.Заголовок = Колонка.Имя;
			МассивКолонок.Добавить(Колонка.Имя);
			Если МассивКолонок.Количество() = 1 Тогда
				Результаты.Вывести(Область);
			Иначе
				Результаты.Присоединить(Область);
			КонецЕсли;	
		КонецЦикла;

		Область = Макет.ПолучитьОбласть("R2C1");
		
		Для Каждого СтрокаТЗ Из Результат Цикл 
			
			ПерваяКолонка = Истина; 
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Область.Параметры.Значение = СтрокаТЗ[Колонка];
				Если ПерваяКолонка Тогда
					Результаты.Вывести(Область);
				Иначе
					Результаты.Присоединить(Область);
				КонецЕсли;
				
				ПерваяКолонка = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерЗаполнения(Команда)
	
	ЗаполнитьПримерНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	ВыполнитьЗапросНаСервере(); 
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРезультаты;
	
КонецПроцедуры
